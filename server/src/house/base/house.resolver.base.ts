/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHouseArgs } from "./CreateHouseArgs";
import { UpdateHouseArgs } from "./UpdateHouseArgs";
import { DeleteHouseArgs } from "./DeleteHouseArgs";
import { HouseCountArgs } from "./HouseCountArgs";
import { HouseFindManyArgs } from "./HouseFindManyArgs";
import { HouseFindUniqueArgs } from "./HouseFindUniqueArgs";
import { House } from "./House";
import { User } from "../../user/base/User";
import { HouseService } from "../house.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => House)
export class HouseResolverBase {
  constructor(
    protected readonly service: HouseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "House",
    action: "read",
    possession: "any",
  })
  async _housesMeta(
    @graphql.Args() args: HouseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [House])
  @nestAccessControl.UseRoles({
    resource: "House",
    action: "read",
    possession: "any",
  })
  async houses(@graphql.Args() args: HouseFindManyArgs): Promise<House[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => House, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "House",
    action: "read",
    possession: "own",
  })
  async house(
    @graphql.Args() args: HouseFindUniqueArgs
  ): Promise<House | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => House)
  @nestAccessControl.UseRoles({
    resource: "House",
    action: "create",
    possession: "any",
  })
  async createHouse(@graphql.Args() args: CreateHouseArgs): Promise<House> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => House)
  @nestAccessControl.UseRoles({
    resource: "House",
    action: "update",
    possession: "any",
  })
  async updateHouse(
    @graphql.Args() args: UpdateHouseArgs
  ): Promise<House | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => House)
  @nestAccessControl.UseRoles({
    resource: "House",
    action: "delete",
    possession: "any",
  })
  async deleteHouse(
    @graphql.Args() args: DeleteHouseArgs
  ): Promise<House | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: House
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
